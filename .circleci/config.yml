version: 2.1

orbs:
  ganta-git: ganta/git@1.2.0
  slack: circleci/slack@3.4.2
  jq: circleci/jq@2.2.0

executors:
  default:
    working_directory: ~/app
    docker:
      - image: cimg/ruby:2.6.6-node
        environment:
          BUNDLER_VERSION: 2.1.4
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          DATABASE_USER: root
      - image: circleci/mysql:8.0.12-ram
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_ROOT_PASSWORD: ''
      - image: redis

commands:
  restore_repo:
    steps:
      - restore_cache:
          name: restore repo
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
  restore_bundle_dependencies:
    steps:
      - restore_cache:
          name: restore bundle
          keys:
            - bundle-v3-cache-{{ checksum "Gemfile.lock" }}
            - bundle-v3-cache-
      - run:
          name: gem install bundler
          command: |
            gem install bundler
      - run:
          name: bundle install
          command: bundle check || bundle install
  setup_db:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          name: create test DB
          command: |
            mv config/database.ci.yml config/database.yml
            bin/rails db:create
            bin/rails db:setup

jobs:
  build:
    executor:
      name: default
    steps:
      # source
      - ganta-git/shallow-clone-checkout
      - save_cache:
          name: save repo
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/app
      # bundle
      - restore_bundle_dependencies
      - save_cache:
          name: save bundle
          key: bundle-v3-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      # yarn
      - restore_cache:
          keys:
            - yarn-cache-{{ checksum "yarn.lock" }}
            - yarn-cache-
      - run:
          name: yarn install
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: yarn-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
  rubocop:
    executor:
      name: default
    steps:
      - restore_repo
      - restore_bundle_dependencies
      - run:
          name: RuboCop
          command: bundle exec rubocop
  brakeman:
    executor:
      name: default
    steps:
      - restore_repo
      - restore_bundle_dependencies
      - run:
          name: A static analysis security
          command: bundle exec brakeman -z
  precompile:
    executor:
      name: default
    steps:
      - restore_repo
      - restore_bundle_dependencies
      - run:
          name: Precompile assets
          command: bundle exec rake assets:precompile
  tbls:
    executor:
      name: default
    steps:
      - restore_repo
      - restore_bundle_dependencies
      - setup_db
      - run:
          name: Install tbls
          command: |
            curl -sL https://git.io/use-tbls > use-tbls.tmp && TBLS_VERSION=v1.39.0 . ./use-tbls.tmp && rm ./use-tbls.tmp
            echo `tbls version`
            tbls diff my://root@127.0.0.1:3306/suburi_test
  swagger:
    executor:
      name: default
    steps:
      - restore_repo
      - restore_bundle_dependencies
      - run:
          name: Generate swagger ui
          command: |
            ruby bin/swagger.rb
      - store_artifacts:
          path: swagger-ui/dist
  test:
    parallelism: 2
    executor:
      name: default
    steps:
      - restore_repo
      - restore_bundle_dependencies
      - setup_db
      - run:
          name: run test
          command: |
            mkdir /tmp/test-results
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec $TESTFILES --profile 10 --format RspecJunitFormatter --out /tmp/test-results/rspec.xml --format progress
      - store_test_results:
          path: /tmp/test-results
      - run:
          name: upload coverage
          command: |
            mkdir coverage_results
            cp coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}.json
      - persist_to_workspace:
          root: ~/app
          paths:
            - coverage_results
  coverage:
    executor:
      name: default
    steps:
      - jq/install
      - restore_repo
      - restore_bundle_dependencies
      - attach_workspace:
          at: ~/app
      - run:
          name: merge coverage
          command: |
            bundle exec rake simplecov:merge_results
      - store_artifacts:
          path: coverage
          destination: coverage
      - run:
          name: Get artifacts
          command: |
            echo $(jq --version)
            echo $CIRCLE_BUILD_NUM
            echo $CIRCLE_API_TOKEN
            artifacts=$(curl -X GET "https://circleci.com/api/v2/project/gh/takaheraw/suburi/902/artifacts" \
            -H "Content-Type: application/json" \
            -H "Circle-Token: ${CIRCLE_API_TOKEN}")
            echo "response = $artifacts"
            artifact=$(echo $artifacts | jq '.items[].url | select(endswith("index.html"))') 
            echo $artifact
            echo "export ARTIFACT_RESPONSE=$artifacts" >> $BASH_ENV
      - slack/notify:
          color: "#42e2f4"
          message: "$ARTIFACT_RESPONSE"
          webhook: $SLACK_WEBHOOK
  pr-release:
    executor:
      name: default
    steps:
      - checkout
      - restore_bundle_dependencies
      - run: bundle exec git-pr-release
  notify:
    executor:
      name: default
    steps:
      - attach_workspace:
          at: ~/app
      - store_artifacts:
          path: coverage
          destination: coverage
      - run:
          name: Get artifacts
          command: |
            artifacts=$(curl -X GET "https://circleci.com/api/v2/project/gh/takaheraw/suburi/$CIRCLE_BUILD_NUM/artifacts" \
            -H "Accept: application/json" \
            -u "$CIRCLE_API_TOKEN:")
            echo "export ARTIFACT_RESPONSE=$artifacts" >> $BASH_ENV
      - slack/notify:
          color: "#42e2f4"
          message: $ARTIFACT_RESPONSE
          webhook: $SLACK_WEBHOOK

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - coverage:
          requires:
            - test
  nightly:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - notify
#      - pr-release:
#          requires:
#            - build
#          filters:
#            branches:
#              only: develop
#      - rubocop:
#          requires:
#            - build
#      - brakeman:
#          requires:
#            - build
#      - tbls:
#          requires:
#            - build
#      - swagger:
#          requires:
#            - build
